# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Usuario(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id=None, nombre=None, correo=None, direccion=None):  # noqa: E501
        """Usuario - a model defined in OpenAPI

        :param user_id: The user_id of this Usuario.  # noqa: E501
        :type user_id: int
        :param nombre: The nombre of this Usuario.  # noqa: E501
        :type nombre: str
        :param correo: The correo of this Usuario.  # noqa: E501
        :type correo: str
        :param direccion: The direccion of this Usuario.  # noqa: E501
        :type direccion: str
        """
        self.openapi_types = {
            'user_id': int,
            'nombre': str,
            'correo': str,
            'direccion': str
        }

        self.attribute_map = {
            'user_id': 'userId',
            'nombre': 'nombre',
            'correo': 'correo',
            'direccion': 'direccion'
        }

        self._user_id = user_id
        self._nombre = nombre
        self._correo = correo
        self._direccion = direccion

    @classmethod
    def from_dict(cls, dikt) -> 'Usuario':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Usuario of this Usuario.  # noqa: E501
        :rtype: Usuario
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self):
        """Gets the user_id of this Usuario.


        :return: The user_id of this Usuario.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Usuario.


        :param user_id: The user_id of this Usuario.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def nombre(self):
        """Gets the nombre of this Usuario.


        :return: The nombre of this Usuario.
        :rtype: str
        """
        return self._nombre

    @nombre.setter
    def nombre(self, nombre):
        """Sets the nombre of this Usuario.


        :param nombre: The nombre of this Usuario.
        :type nombre: str
        """
        if nombre is None:
            raise ValueError("Invalid value for `nombre`, must not be `None`")  # noqa: E501

        self._nombre = nombre

    @property
    def correo(self):
        """Gets the correo of this Usuario.


        :return: The correo of this Usuario.
        :rtype: str
        """
        return self._correo

    @correo.setter
    def correo(self, correo):
        """Sets the correo of this Usuario.


        :param correo: The correo of this Usuario.
        :type correo: str
        """
        if correo is None:
            raise ValueError("Invalid value for `correo`, must not be `None`")  # noqa: E501

        self._correo = correo

    @property
    def direccion(self):
        """Gets the direccion of this Usuario.


        :return: The direccion of this Usuario.
        :rtype: str
        """
        return self._direccion

    @direccion.setter
    def direccion(self, direccion):
        """Sets the direccion of this Usuario.


        :param direccion: The direccion of this Usuario.
        :type direccion: str
        """
        if direccion is None:
            raise ValueError("Invalid value for `direccion`, must not be `None`")  # noqa: E501

        self._direccion = direccion
